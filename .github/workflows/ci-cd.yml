name: CI/CD

on:
  push:
    branches:
      - main
      - 'v[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    branches:
      - main
      - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
  build-test:
    name: Build, Test & Coverage on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.4'

      - name: Build
        run: go build ./...

      - name: Run Tests with Coverage
        run: |
          go test -coverprofile=coverage.out ./...
          go tool cover -func=coverage.out
        shell: bash

      - name: Upload coverage report
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.out

  format-check:
    name: Go Format Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.4'

      - name: Check Go formatting and comment on PR
        run: |
          unformatted=$(gofmt -l .)
          if [ -n "$unformatted" ]; then
            echo "The following files need formatting:"
            echo "$unformatted"
            
            # Get PR author
            pr_author="${{ github.event.pull_request.user.login }}"
            
            # Create PR comment
            comment_body="@$pr_author Go formatting is required for the following files:

\`\`\`
$unformatted
\`\`\`

Please run \`go fmt ./...\` to format your code and push the changes."

            gh pr comment ${{ github.event.number }} --body "$comment_body"
            exit 1
          else
            echo "All Go code is properly formatted"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
