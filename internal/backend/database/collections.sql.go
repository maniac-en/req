// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: collections.sql

package database

import (
	"context"
)

const countCollections = `-- name: CountCollections :one
SELECT COUNT(*) FROM collections
`

func (q *Queries) CountCollections(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countCollections)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createCollection = `-- name: CreateCollection :one
INSERT INTO collections (name) VALUES (?) RETURNING id, name, created_at, updated_at
`

func (q *Queries) CreateCollection(ctx context.Context, name string) (Collection, error) {
	row := q.db.QueryRowContext(ctx, createCollection, name)
	var i Collection
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCollection = `-- name: DeleteCollection :exec
DELETE FROM collections
WHERE id = ?
`

func (q *Queries) DeleteCollection(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCollection, id)
	return err
}

const getCollection = `-- name: GetCollection :one
SELECT id, name, created_at, updated_at FROM collections
WHERE id = ?
`

func (q *Queries) GetCollection(ctx context.Context, id int64) (Collection, error) {
	row := q.db.QueryRowContext(ctx, getCollection, id)
	var i Collection
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCollections = `-- name: GetCollections :many
SELECT
    c.id,
    c.name,
    c.created_at,
    c.updated_at,
    COUNT(e.id) AS endpoint_count
FROM collections c
LEFT JOIN endpoints e ON e.collection_id = c.id
GROUP BY c.id, c.name, c.created_at, c.updated_at
ORDER BY c.created_at DESC
`

type GetCollectionsRow struct {
	ID            int64  `db:"id" json:"id"`
	Name          string `db:"name" json:"name"`
	CreatedAt     string `db:"created_at" json:"created_at"`
	UpdatedAt     string `db:"updated_at" json:"updated_at"`
	EndpointCount int64  `db:"endpoint_count" json:"endpoint_count"`
}

func (q *Queries) GetCollections(ctx context.Context) ([]GetCollectionsRow, error) {
	rows, err := q.db.QueryContext(ctx, getCollections)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCollectionsRow
	for rows.Next() {
		var i GetCollectionsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.EndpointCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCollectionsPaginated = `-- name: GetCollectionsPaginated :many
SELECT id, name, created_at, updated_at FROM collections
ORDER BY created_at DESC
LIMIT ? OFFSET ?
`

type GetCollectionsPaginatedParams struct {
	Limit  int64 `db:"limit" json:"limit"`
	Offset int64 `db:"offset" json:"offset"`
}

func (q *Queries) GetCollectionsPaginated(ctx context.Context, arg GetCollectionsPaginatedParams) ([]Collection, error) {
	rows, err := q.db.QueryContext(ctx, getCollectionsPaginated, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Collection
	for rows.Next() {
		var i Collection
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCollectionName = `-- name: UpdateCollectionName :one
UPDATE collections
SET name = ?
WHERE id = ?
RETURNING id, name, created_at, updated_at
`

type UpdateCollectionNameParams struct {
	Name string `db:"name" json:"name"`
	ID   int64  `db:"id" json:"id"`
}

func (q *Queries) UpdateCollectionName(ctx context.Context, arg UpdateCollectionNameParams) (Collection, error) {
	row := q.db.QueryRowContext(ctx, updateCollectionName, arg.Name, arg.ID)
	var i Collection
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
